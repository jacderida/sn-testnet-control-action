name: Start Nodes
description: Use testnet-deploy to start all nodes for a deployment
inputs:
  ansible-forks:
    description: The number of forks, or parallel connections, to use with Ansible. Defaults to 50.
  custom-inventory:
    description: >
      Run the start safenode playbook against particular VMs in the environment.
      Should be a comma-separated list.
      Cannot be used with the node-type input.
  interval:
    description: An interval to be applied between starting the nodes. Value is in milliseconds.
  network-name:
    description: The name of the network
    required: true
  node-type:
    description: >
      Specify the type of node VM to start the safenode services on. If not provided, the safenode services on
      all the node VMs will be started. Valid values are "bootstrap", "genesis", "generic" and "private".
      Cannot be used with the custom-inventory input.
  service-names:
    description: >
      Specify specific services to stop. Should be a comma-separated list.
      Each value will be passed as a --service-name argument.

runs:
  using: composite
  steps:
    - name: start
      env:
        ANSIBLE_FORKS: ${{ inputs.ansible-forks }}
        CUSTOM_INVENTORY: ${{ inputs.custom-inventory }}
        INTERVAL: ${{ inputs.interval }}
        NETWORK_NAME: ${{ inputs.network-name }}
        NODE_TYPE: ${{ inputs.node-type }}
      shell: bash
      run: |
        set -e

        cd sn-testnet-deploy
        command="testnet-deploy start --name $NETWORK_NAME "
        [[ -n $ANSIBLE_FORKS ]] && command="$command --forks $ANSIBLE_FORKS "
        [[ -n $INTERVAL ]] && command="$command --interval $INTERVAL "
        [[ -n $NODE_TYPE ]] && command="$command --node-type $NODE_TYPE "

        if [[ -n $CUSTOM_INVENTORY ]]; then
          IFS=',' read -ra VM_NAMES <<< "$CUSTOM_INVENTORY"
          for vm_name in "${VM_NAMES[@]}"; do
            command="$command --custom-inventory $vm_name"
          done
        fi

        if [[ -n $SERVICE_NAMES ]]; then
          IFS=',' read -ra SERVICES <<< "$SERVICE_NAMES"
          for service in "${SERVICES[@]}"; do
            command="$command --service-name $service"
          done
        fi

        echo "Will run testnet-deploy with: $command"
        eval $command
