name: Upscale Network
description: Upscale an existing network to a given configuration
inputs:
  auditor-vm-count:
    description: Number of auditor VMs to be deployed
  bootstrap-node-count:
    description: Number of node services to run on each bootstrap node VM
  bootstrap-node-vm-count:
    description: Number of bootstrap node VMs to be deployed
  downloaders-count:
    description: Number of downloader services to run
    default: '0'
  infra-only:
    description: Only run the terraform part to upscale the machines
    default: false
  max-log-files:
    description: Maximum number of log files to keep for each service
  max-archived-log-files:
    description: Maximum number of archived log files to keep for each service
  network-name:
    description: The name of the network
    required: true
  node-count:
    description: Number of node services to run on each node VM
  node-vm-count:
    description: Number of node VMs to be deployed
  plan:
    description: Run a plan for the operation without performing it
    default: false
  private-node-count:
    description: Number of node services to run on each private node VM
  private-node-vm-count:
    description: Number of private node VMs to be deployed
  provider:
    description: The cloud provider. Accepts 'aws' or 'digital-ocean'.
    required: true
  public-rpc:
    description: Set to make node manager RPC daemons publicly accessible
    required: true
    default: false
  rust-log:
    description: Set RUST_LOG to this value for testnet-deploy
    required: false
  safe-version:
    description: >
      Provide the version of safe to use with any new uploaders.
      This value must be supplied when `uploader-vm-count` is used.
    required: false
  uploader-vm-count:
    description: Number of uploader VMs to be deployed

runs:
  using: composite
  steps:
    - name: upscale network
      env:
        DESIRED_AUDITOR_VM_COUNT: ${{ inputs.auditor-vm-count }}
        DESIRED_BOOTSTRAP_NODE_COUNT: ${{ inputs.bootstrap-node-count }}
        DESIRED_BOOTSTRAP_NODE_VM_COUNT: ${{ inputs.bootstrap-node-vm-count }}
        DESIRED_NODE_COUNT: ${{ inputs.node-count }}
        DESIRED_NODE_VM_COUNT: ${{ inputs.node-vm-count }}
        DESIRED_PRIVATE_NODE_COUNT: ${{ inputs.private-node-count }}
        DESIRED_PRIVATE_NODE_VM_COUNT: ${{ inputs.private-node-vm-count }}
        DESIRED_UPLOADER_VM_COUNT: ${{ inputs.uploader-vm-count }}
        DOWNLOADERS_COUNT: ${{ inputs.downloaders-count }}
        INFRA_ONLY: ${{ inputs.infra-only }}
        MAX_ARCHIVED_LOG_FILES: ${{ inputs.max-archived-log-files }}
        MAX_LOG_FILES: ${{ inputs.max-log-files }}
        NETWORK_NAME: ${{ inputs.network-name }}
        PLAN: ${{ inputs.plan }}
        PROVIDER: ${{ inputs.provider }}
        PUBLIC_RPC: ${{ inputs.public-rpc }}
        RUST_LOG: ${{ inputs.rust-log }}
        SAFE_VERSION: ${{ inputs.safe-version }}
      shell: bash
      run: |
        set -e

        cd sn-testnet-deploy
        command="testnet-deploy upscale \
          --name $NETWORK_NAME \
          --provider $PROVIDER "
        [[ -n $DESIRED_AUDITOR_VM_COUNT ]] && command="$command --desired-auditor-vm-count $DESIRED_AUDITOR_VM_COUNT "
        [[ -n $DESIRED_BOOTSTRAP_NODE_COUNT ]] && command="$command --desired-bootstrap-node-count $DESIRED_BOOTSTRAP_NODE_COUNT "
        [[ -n $DESIRED_BOOTSTRAP_NODE_VM_COUNT ]] && command="$command --desired-bootstrap-node-vm-count $DESIRED_BOOTSTRAP_NODE_VM_COUNT "
        [[ -n $DESIRED_NODE_COUNT ]] && command="$command --desired-node-count $DESIRED_NODE_COUNT "
        [[ -n $DESIRED_NODE_VM_COUNT ]] && command="$command --desired-node-vm-count $DESIRED_NODE_VM_COUNT "
        [[ -n $DESIRED_PRIVATE_NODE_COUNT ]] && command="$command --desired-private-node-count $DESIRED_PRIVATE_NODE_COUNT "
        [[ -n $DESIRED_PRIVATE_NODE_VM_COUNT ]] && command="$command --desired-private-node-vm-count $DESIRED_PRIVATE_NODE_VM_COUNT "
        [[ -n $DESIRED_UPLOADER_VM_COUNT ]] && command="$command --desired-uploader-vm-count $DESIRED_UPLOADER_VM_COUNT "
        [[ -n $DOWNLOADERS_COUNT ]] && command="$command --downloaders-count $DOWNLOADERS_COUNT "
        [[ $INFRA_ONLY == "true" ]] && command="$command --infra-only "
        [[ -n $MAX_ARCHIVED_LOG_FILES ]] && command="$command --max-archived-log-files $MAX_ARCHIVED_LOG_FILES "
        [[ -n $MAX_LOG_FILES ]] && command="$command --max-log-files $MAX_LOG_FILES "
        [[ $PLAN == "true" ]] && command="$command --plan "
        [[ $PUBLIC_RPC == "true" ]] && command="$command --public-rpc "
        [[ -n $SAFE_VERSION ]] && command="$command --safe-version $SAFE_VERSION "

        echo "Will run testnet-deploy with: $command"
        eval $command