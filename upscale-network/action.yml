name: Upscale Network
description: Upscale an existing network to a given configuration
inputs:
  ant-version:
    description: >
      Provide the version of autonomi to use with any new uploaders.
      This value must be supplied when `uploader-vm-count` is used.
    required: false
  antctl-version:
    description: Version of antctl to use for any new nodes
    required: false
  antnode-version:
    description: Version of safenode to use for any new nodes
    required: false
  autonomi-branch:
    description: >
      Build binaries from the specified autonomi branch. The testnet will use these binaries.
  autonomi-repo-owner:
    description: >
      Build binaries from the autonomi repository owned by this org or username. The testnet
      will use these binaries.
  desired-node-count:
    description: Number of node services to run on each node VM
  desired-node-vm-count:
    description: Number of node VMs to be deployed
  desired-peer-cache-node-count:
    description: Number of node services to run on each peer cache node VM
  desired-peer-cache-node-vm-count:
    description: Number of peer cache node VMs to be deployed
  desired-private-node-count:
    description: Number of node services to run on each private node VM
  desired-private-node-vm-count:
    description: Number of private node VMs to be deployed
  desired-uploader-vm-count:
    description: Number of uploader VMs to be deployed
  desired-uploaders-count:
    description: Number of uploaders to run per VM
  funding-wallet-secret-key:
    description: Secret key for the funding wallet
    required: false
  infra-only:
    description: Only run the terraform part to upscale the machines
    default: false
  interval:
    description: The interval to apply between each node upgrade. Units are ms. The default is 200.
  max-archived-log-files:
    description: Maximum number of archived log files to keep for each service
  max-log-files:
    description: Maximum number of log files to keep for each service
  network-name:
    description: The name of the network
    required: true
  plan:
    description: Run a plan for the operation without performing it
    default: false
  provider:
    description: The cloud provider. Accepts 'aws' or 'digital-ocean'.
    required: true
  public-rpc:
    description: Set to make node manager RPC daemons publicly accessible
    required: true
    default: false
  rust-log:
    description: Set RUST_LOG to this value for testnet-deploy
    required: false

runs:
  using: composite
  steps:
    - name: upscale network
      env:
        ANT_VERSION: ${{ inputs.ant-version }}
        ANTCTL_VERSION: ${{ inputs.antctl-version }}
        ANTNODE_VERSION: ${{ inputs.antnode-version }}
        AUTONOMI_BRANCH: ${{ inputs.autonomi-branch }}
        AUTONOMI_REPO_OWNER: ${{ inputs.autonomi-repo-owner }}
        DESIRED_NODE_COUNT: ${{ inputs.node-count }}
        DESIRED_NODE_VM_COUNT: ${{ inputs.node-vm-count }}
        DESIRED_PEER_CACHE_NODE_COUNT: ${{ inputs.peer-cache-node-count }}
        DESIRED_PEER_CACHE_NODE_VM_COUNT: ${{ inputs.peer-cache-node-vm-count }}
        DESIRED_PRIVATE_NODE_COUNT: ${{ inputs.private-node-count }}
        DESIRED_PRIVATE_NODE_VM_COUNT: ${{ inputs.private-node-vm-count }}
        DESIRED_UPLOADERS_COUNT: ${{ inputs.uploaders-count }}
        DESIRED_UPLOADER_VM_COUNT: ${{ inputs.uploader-vm-count }}
        FUNDING_WALLET_SECRET_KEY: ${{ inputs.funding-wallet-secret-key }}
        INFRA_ONLY: ${{ inputs.infra-only }}
        INTERVAL: ${{ inputs.interval }}
        MAX_ARCHIVED_LOG_FILES: ${{ inputs.max-archived-log-files }}
        MAX_LOG_FILES: ${{ inputs.max-log-files }}
        NETWORK_NAME: ${{ inputs.network-name }}
        PLAN: ${{ inputs.plan }}
        PROVIDER: ${{ inputs.provider }}
        PUBLIC_RPC: ${{ inputs.public-rpc }}
        RUST_LOG: ${{ inputs.rust-log }}
      shell: bash
      run: |
        set -e

        cd sn-testnet-deploy
        command="testnet-deploy upscale \
          --name $NETWORK_NAME \
          --provider $PROVIDER "
        [[ -n $ANT_VERSION ]] && command="$command --ant-version $ANT_VERSION "
        [[ -n $ANTCTL_VERSION ]] && command="$command --antctl-version $ANTCTL_VERSION "
        [[ -n $ANTNODE_VERSION ]] && command="$command --antnode-version $ANTNODE_VERSION "
        [[ -n $AUTONOMI_BRANCH ]] && command="$command --branch $AUTONOMI_BRANCH "
        [[ -n $AUTONOMI_REPO_OWNER ]] && command="$command --repo-owner $AUTONOMI_REPO_OWNER "
        [[ -n $DESIRED_NODE_COUNT && $DESIRED_NODE_COUNT != "0" ]] && command="$command --desired-node-count $DESIRED_NODE_COUNT "
        [[ -n $DESIRED_NODE_VM_COUNT && $DESIRED_NODE_VM_COUNT != "0" ]] && command="$command --desired-node-vm-count $DESIRED_NODE_VM_COUNT "
        [[ -n $DESIRED_PEER_CACHE_NODE_COUNT && $DESIRED_PEER_CACHE_NODE_COUNT != "0" ]] && command="$command --desired-peer-cache-node-count $DESIRED_PEER_CACHE_NODE_COUNT "
        [[ -n $DESIRED_PEER_CACHE_NODE_VM_COUNT && $DESIRED_PEER_CACHE_NODE_VM_COUNT != "0" ]] && command="$command --desired-peer-cache-node-vm-count $DESIRED_PEER_CACHE_NODE_VM_COUNT "
        [[ -n $DESIRED_PRIVATE_NODE_COUNT && $DESIRED_PRIVATE_NODE_COUNT != "0" ]] && command="$command --desired-private-node-count $DESIRED_PRIVATE_NODE_COUNT "
        [[ -n $DESIRED_PRIVATE_NODE_VM_COUNT && $DESIRED_PRIVATE_NODE_VM_COUNT != "0" ]] && command="$command --desired-private-node-vm-count $DESIRED_PRIVATE_NODE_VM_COUNT "
        [[ -n $DESIRED_UPLOADERS_COUNT && $DESIRED_UPLOADERS_COUNT != "0" ]] && command="$command --desired-uploaders-count $DESIRED_UPLOADERS_COUNT "
        [[ -n $DESIRED_UPLOADER_VM_COUNT && $DESIRED_UPLOADER_VM_COUNT != "0" ]] && command="$command --desired-uploader-vm-count $DESIRED_UPLOADER_VM_COUNT "
        [[ -n $FUNDING_WALLET_SECRET_KEY ]] && command="$command --funding-wallet-secret-key $FUNDING_WALLET_SECRET_KEY "
        [[ $INFRA_ONLY == "true" ]] && command="$command --infra-only "
        [[ -n $INTERVAL ]] && command="$command --interval $INTERVAL "
        [[ -n $MAX_ARCHIVED_LOG_FILES ]] && command="$command --max-archived-log-files $MAX_ARCHIVED_LOG_FILES "
        [[ -n $MAX_LOG_FILES ]] && command="$command --max-log-files $MAX_LOG_FILES "
        [[ $PLAN == "true" ]] && command="$command --plan "
        [[ $PUBLIC_RPC == "true" ]] && command="$command --public-rpc "

        echo "Will run testnet-deploy with: $command"
        eval $command