name: Launch Network
description: Launches a remote Autonomi network with a given specification
inputs:
  ansible-forks:
    description: The number of forks to use with Ansible
  ansible-verbose:
    description: Set to use verbose output for Ansible
    default: false
  bootstrap-node-count:
    description: Number of node services to run on each bootstrap node VM
  bootstrap-node-vm-count:
    description: Number of bootstrap node VMs to be deployed
  bootstrap-node-vm-size:
    description: The size of the bootstrap node VMs
  chunk-size:
    description: >
      Specify the chunk size in bytes as a 64-bit integer.
      Only applies when building a custom branch.
  downloaders-count:
    description: Number of downloader services to run
    default: '0'
  environment-type:
    description: >
      Possible values are 'development', 'staging' and 'production'. This value determines the sizes
      and counts of VMs. The counts can be overridden with the other count inputs.
    required: true
  environment-vars:
    description: Pass a comma-separated list of environment variables to safenode services
  evm-network-type:
    description: >
      The type of EVM network to use. Possible values are 'arbitrum-one', 'arbitrum-sepolia', or 'custom'.
    default: 'arbitrum-one'
  evm-node-vm-size:
    description: The size of the EVM node VMs
  foundation-pk:
    description: Optionally set the foundation public key for a custom safenode binary.
  genesis-pk:
    description: Optionally set the genesis public key for a custom safenode binary.
  log-format:
    description: Set the log format for the nodes, can be 'json' or 'default'. Defaults to 'default' if not set.
  max-archived-log-files:
    description: Maximum number of archived log files to keep for each service
  max-log-files:
    description: Maximum number of log files to keep for each service
  network-contacts-file-name:
    description: Provide a name for the network contacts file
  network-name:
    description: The name of the testnet.
    required: true
  network-royalties-pk:
    description: Optionally set the network royalties public key for a custom safenode binary.
  node-count:
    description: Number of node services to run on each node VM
  node-vm-count:
    description: Number of node VMs to be deployed
  node-vm-size:
    description: The size of the regular node VMs
  payment-forward-pk:
    description: Optionally set the payment forward public key for a custom safenode binary.
  private-node-count:
    description: Number of node services to run on each private node VM
  private-node-vm-count:
    description: Number of private node VMs to be deployed
  protocol-version:
    description: The network protocol version can be set to 'restricted' or any custom version string.
  provider:
    description: The cloud provider. Accepts 'aws' or 'digital-ocean'.
    required: true
  public-rpc:
    description: Set to make node manager RPC daemons publicly accessible
    required: true
    default: false
  rewards-address:
    description: The rewards address for each safenode service.
    required: true
  safenode-features:
    description: Comma-separated list of features to be used when building a branch of safenode
  safe-version:
    description: Supply a version for safe. Otherwise the latest will be used.
  safenode-version:
    description: Supply a version for safenode. Otherwise the latest will be used.
  safenode-manager-version:
    description: Supply a version for safenode-manager. Otherwise the latest will be used.
  safe-network-branch:
    description: >
      Build binaries from the specified safe_network branch. The testnet will use these binaries.
  safe-network-user:
    description: >
      Build binaries from the safe_network repository owned by this org or username. The testnet
      will use these binaries.
  uploader-vm-count:
    description: Number of uploader VMs to be deployed
  uploader-vm-size:
    description: The size of the uploader VMs
  uploaders-count:
    description: Number of uploaders to run per VM
  wallet-secret-key:
      description: >
        A wallet secret key for the uploaders.
        It only applies when Arbitrum One or Sepolia networks are used.

runs:
  using: composite
  steps:
    - name: Create network
      env:
        ANSIBLE_FORKS: ${{ inputs.ansible-forks }}
        ANSIBLE_VERBOSE: ${{ inputs.ansible-verbose }}
        BETA_ENCRYPTION_KEY: ${{ inputs.beta-encryption-key }}
        BOOTSTRAP_NODE_COUNT: ${{ inputs.bootstrap-node-count }}
        BOOTSTRAP_NODE_VM_COUNT: ${{ inputs.bootstrap-node-vm-count }}
        BOOTSTRAP_NODE_VM_SIZE: ${{ inputs.bootstrap-node-vm-size }}
        CHUNK_SIZE: ${{ inputs.chunk-size }}
        DOWNLOADERS_COUNT: ${{ inputs.downloaders-count }}
        ENVIRONMENT_TYPE: ${{ inputs.environment-type }}
        ENVIRONMENT_VARS: ${{ inputs.environment-vars }}
        EVM_NETWORK_TYPE: ${{ inputs.evm-network-type }}
        EVM_NODE_VM_SIZE: ${{ inputs.evm-node-vm-size }}
        FOUNDATION_PK: ${{ inputs.foundation-pk }}
        GENESIS_PK: ${{ inputs.genesis-pk }}
        LOG_FORMAT: ${{ inputs.log-format }}
        MAX_ARCHIVED_LOG_FILES: ${{ inputs.max-archived-log-files }}
        MAX_LOG_FILES: ${{ inputs.max-log-files }}
        NETWORK_CONTACTS_FILE_NAME: ${{ inputs.network-contacts-file-name }}
        NETWORK_NAME: ${{ inputs.network-name }}
        NETWORK_ROYALTIES_PK: ${{ inputs.network-royalties-pk }}
        NODE_COUNT: ${{ inputs.node-count }}
        NODE_VM_COUNT: ${{ inputs.node-vm-count }}
        NODE_VM_SIZE: ${{ inputs.node-vm-size }}
        PAYMENT_FORWARD_PK: ${{ inputs.payment-forward-pk }}
        PRIVATE_NODE_COUNT: ${{ inputs.private-node-count }}
        PRIVATE_NODE_VM_COUNT: ${{ inputs.private-node-vm-count }}
        PROTOCOL_VERSION: ${{ inputs.protocol-version }}
        PROVIDER: ${{ inputs.provider }}
        PUBLIC_RPC: ${{ inputs.public-rpc }}
        RUST_LOG: ${{ inputs.rust-log }}
        REWARDS_ADDRESS: ${{ inputs.rewards-address }}
        SAFE_NETWORK_BRANCH: ${{ inputs.safe-network-branch }}
        SAFE_NETWORK_USER: ${{ inputs.safe-network-user }}
        SAFE_VERSION: ${{ inputs.safe-version }}
        SAFENODE_FEATURES: ${{ inputs.safenode-features }}
        SAFENODE_MANAGER_VERSION: ${{ inputs.safenode-manager-version }}
        SAFENODE_VERSION: ${{ inputs.safenode-version }}
        UPLOADER_VM_COUNT: ${{ inputs.uploader-vm-count }}
        UPLOADER_VM_SIZE: ${{ inputs.uploader-vm-size }}
        UPLOADERS_COUNT: ${{ inputs.uploaders-count }}
        WALLET_SECRET_KEY: ${{ inputs.wallet-secret-key }}
      shell: bash
      run: |
        set -e

        cd sn-testnet-deploy
        command="testnet-deploy deploy \
          --environment-type $ENVIRONMENT_TYPE \
          --name $NETWORK_NAME \
          --provider $PROVIDER "
        [[ $ANSIBLE_VERBOSE == "true" ]] && command="$command --ansible-verbose "
        [[ -n $BOOTSTRAP_NODE_COUNT ]] && command="$command --bootstrap-node-count $BOOTSTRAP_NODE_COUNT "
        [[ -n $BOOTSTRAP_NODE_VM_COUNT ]] && command="$command --bootstrap-node-vm-count $BOOTSTRAP_NODE_VM_COUNT "
        [[ -n $BOOTSTRAP_NODE_VM_SIZE ]] && command="$command --bootstrap-node-vm-size $BOOTSTRAP_NODE_VM_SIZE "
        [[ -n $CHUNK_SIZE ]] && command="$command --chunk-size $CHUNK_SIZE "
        [[ $DOWNLOADERS_COUNT -gt 0 ]] && command="$command --downloaders-count $DOWNLOADERS_COUNT "
        [[ -n $ENVIRONMENT_VARS ]] && command="$command --env $ENVIRONMENT_VARS "
        [[ -n $EVM_NETWORK_TYPE ]] && command="$command --evm-network-type $EVM_NETWORK_TYPE "
        [[ -n $EVM_NODE_VM_SIZE ]] && command="$command --evm-node-vm-size $EVM_NODE_VM_SIZE "
        [[ -n $FOUNDATION_PK ]] && command="$command --foundation-pk $FOUNDATION_PK "
        [[ -n $GENESIS_PK ]] && command="$command --genesis-pk $GENESIS_PK "
        [[ -n $LOG_FORMAT ]] && command="$command --log-format $LOG_FORMAT "
        [[ -n $MAX_ARCHIVED_LOG_FILES ]] && command="$command --max-archived-log-files $MAX_ARCHIVED_LOG_FILES "
        [[ -n $MAX_LOG_FILES ]] && command="$command --max-log-files $MAX_LOG_FILES "
        [[ -n $NETWORK_CONTACTS_FILE_NAME ]] && command="$command --network-contacts-file-name $NETWORK_CONTACTS_FILE_NAME "
        [[ -n $NETWORK_ROYALTIES_PK ]] && command="$command --network-royalties-pk $NETWORK_ROYALTIES_PK "
        [[ -n $NODE_COUNT ]] && command="$command --node-count $NODE_COUNT "
        [[ -n $NODE_VM_COUNT ]] && command="$command --node-vm-count $NODE_VM_COUNT "
        [[ -n $NODE_VM_SIZE ]] && command="$command --node-vm-size $NODE_VM_SIZE "
        [[ -n $PAYMENT_FORWARD_PK ]] && command="$command --payment-forward-pk $PAYMENT_FORWARD_PK "
        [[ -n $PRIVATE_NODE_COUNT ]] && command="$command --private-node-count $PRIVATE_NODE_COUNT "
        [[ -n $PRIVATE_NODE_VM_COUNT ]] && command="$command --private-node-vm-count $PRIVATE_NODE_VM_COUNT "
        [[ -n $PROTOCOL_VERSION ]] && command="$command --protocol-version $PROTOCOL_VERSION "
        [[ $PUBLIC_RPC == "true" ]] && command="$command --public-rpc "
        [[ -n $REWARDS_ADDRESS ]] && command="$command --rewards-address $REWARDS_ADDRESS "
        [[ -n $SAFE_NETWORK_BRANCH ]] && command="$command --branch $SAFE_NETWORK_BRANCH "
        [[ -n $SAFE_NETWORK_USER ]] && command="$command --repo-owner $SAFE_NETWORK_USER "
        [[ -n $SAFE_VERSION ]] && command="$command --safe-version $SAFE_VERSION "
        [[ -n $SAFENODE_FEATURES ]] && command="$command --safenode-features $SAFENODE_FEATURES "
        [[ -n $SAFENODE_MANAGER_VERSION ]] && command="$command --safenode-manager-version $SAFENODE_MANAGER_VERSION "
        [[ -n $SAFENODE_VERSION ]] && command="$command --safenode-version $SAFENODE_VERSION "
        [[ -n $UPLOADER_VM_COUNT ]] && command="$command --uploader-vm-count $UPLOADER_VM_COUNT "
        [[ -n $UPLOADER_VM_SIZE ]] && command="$command --uploader-vm-size $UPLOADER_VM_SIZE "
        [[ -n $UPLOADERS_COUNT ]] && command="$command --uploaders-count $UPLOADERS_COUNT "
        [[ -n $WALLET_SECRET_KEY && $EVM_NETWORK_TYPE != "custom" ]] && command="$command --funding-wallet-secret-key $WALLET_SECRET_KEY "

        echo "Will run testnet-deploy with: $command"
        eval $command

    - name: Set SAFE_PEERS and SN_INVENTORY
      shell: bash
      run: |
        inventory_path=/home/runner/.local/share/safe/testnet-deploy/"${{ inputs.network-name }}"-inventory.json
        echo "Inventory Path: $inventory_path"
        genesis_multiaddr=$(jq -r '.genesis_multiaddr' $inventory_path)
        echo "SAFE_PEERS=$genesis_multiaddr" >> $GITHUB_ENV
        echo "SN_INVENTORY=$inventory_path" >> $GITHUB_ENV
